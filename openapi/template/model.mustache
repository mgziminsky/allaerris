{{>partial_header}}
use crate::models;
{{#models}}
{{#model}}

{{#description}}
/// {{{.}}}
{{/description}}
{{!-- for enum schemas --}}
{{#isEnum}}
#[derive(Default, Copy, Clone, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
{{#isDeprecated}}
#[deprecated]
{{/isDeprecated}}
pub enum {{{classname}}} {
    #[default]
{{#allowableValues}}
{{#enumVars}}
    {{#deprecated}}
    #[deprecated]
    {{/deprecated}}
    #[serde(rename = "{{{value}}}")]
    {{{name}}},
{{/enumVars}}
{{/allowableValues}}
}

impl std::fmt::Display for {{{classname}}} {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str(match self {
            {{#allowableValues}}
            {{#enumVars}}
            Self::{{{name}}} => "{{{value}}}",
            {{/enumVars}}
            {{/allowableValues}}
        })
    }
}

{{/isEnum}}
{{!-- for schemas that have a discriminator --}}
{{#discriminator}}
#[derive(Default, Clone, Debug, PartialEq, Serialize, Deserialize)]
#[serde(tag = "{{{propertyBaseName}}}")]
{{#isDeprecated}}
#[deprecated]
{{/isDeprecated}}
pub enum {{{classname}}} {
    #[default]
    {{^oneOf}}
    {{#mappedModels}}
    #[serde(rename="{{mappingName}}")]
    {{{modelName}}} {
    {{#vars}}
        {{#description}}
        /// {{{.}}}
        {{/description}}
        {{#deprecated}}
        #[deprecated]
        {{/deprecated}}
        #[serde(rename = "{{{baseName}}}"{{#isNullable}}, skip_serializing_if = "Option::is_none"{{/isNullable}})]
        {{{name}}}: {{#isNullable}}Option<{{/isNullable}}{{#isEnum}}{{{enumName}}}{{/isEnum}}{{^isEnum}}{{#isModel}}{{^avoidBoxedModels}}Box<{{/avoidBoxedModels}}{{{dataType}}}{{^avoidBoxedModels}}>{{/avoidBoxedModels}}{{/isModel}}{{^isModel}}{{{dataType}}}{{/isModel}}{{/isEnum}}{{#isNullable}}>{{/isNullable}},
    {{/vars}}
    },
    {{/mappedModels}}
    {{/oneOf}}
    {{^oneOf.isEmpty}}
    {{#composedSchemas.oneOf}}
    {{#description}}
    /// {{{.}}}
    {{/description}}
    {{#deprecated}}
    #[deprecated]
    {{/deprecated}}
    {{#baseName}}
    #[serde(rename="{{{.}}}")]
    {{/baseName}}
    {{{name}}}({{#isModel}}{{^avoidBoxedModels}}Box<{{/avoidBoxedModels}}{{/isModel}}{{{dataType}}}{{#isModel}}{{^avoidBoxedModels}}>{{/avoidBoxedModels}}{{/isModel}}),
    {{/composedSchemas.oneOf}}
    {{/oneOf.isEmpty}}
}

{{/discriminator}}
{{!-- for non-enum schemas --}}
{{^isEnum}}
{{^discriminator}}
{{#oneOf.isEmpty}}
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize{{^nonNullableVars}}, Default{{/nonNullableVars}})]
{{#isDeprecated}}
#[deprecated]
{{/isDeprecated}}
pub struct {{{classname}}} {
{{#vars}}
    {{#description}}
    /// {{{.}}}
    {{/description}}
    {{#deprecated}}
    #[deprecated]
    {{/deprecated}}
    #[serde(rename = "{{{baseName}}}"{{#isNullable}}, skip_serializing_if = "Option::is_none"{{/isNullable}})]
    pub {{{name}}}: {{#isNullable}}Option<{{/isNullable}}{{#isEnum}}{{#isArray}}{{#uniqueItems}}std::collections::HashSet<{{/uniqueItems}}{{^uniqueItems}}Vec<{{/uniqueItems}}{{/isArray}}{{{enumName}}}{{#isArray}}>{{/isArray}}{{/isEnum}}{{^isEnum}}{{#isModel}}{{^avoidBoxedModels}}Box<{{/avoidBoxedModels}}{{{dataType}}}{{^avoidBoxedModels}}>{{/avoidBoxedModels}}{{/isModel}}{{^isModel}}{{{dataType}}}{{/isModel}}{{/isEnum}}{{#isNullable}}>{{/isNullable}},
{{/vars}}
}

impl {{{classname}}} {
    {{#description}}
    /// {{{.}}}
    {{/description}}
    pub fn new({{#nonNullableVars}}{{{name}}}: {{#isNullable}}Option<{{/isNullable}}{{#isEnum}}{{#isArray}}{{#uniqueItems}}std::collections::HashSet<{{/uniqueItems}}{{^uniqueItems}}Vec<{{/uniqueItems}}{{/isArray}}{{{enumName}}}{{#isArray}}>{{/isArray}}{{/isEnum}}{{^isEnum}}{{{dataType}}}{{/isEnum}}{{#isNullable}}>{{/isNullable}}{{^-last}}, {{/-last}}{{/nonNullableVars}}) -> Self {
        Self {
        {{#nonNullableVars}}
            {{{name}}},
        {{/nonNullableVars}}
        {{#vars}}
        {{#isNullable}}
            {{{name}}}: None,
        {{/isNullable}}
        {{/vars}}
        }
    }
}

{{/oneOf.isEmpty}}
{{^oneOf.isEmpty}}
{{! TODO: add other vars that are not part of the oneOf}}
{{#description}}
/// {{{.}}}
{{/description}}
#[derive(Default, Clone, Debug, PartialEq, Serialize, Deserialize)]
#[serde(untagged)]
{{#isDeprecated}}
#[deprecated]
{{/isDeprecated}}
pub enum {{classname}} {
    #[default]
{{#composedSchemas.oneOf}}
    {{#description}}
    /// {{{.}}}
    {{/description}}
    {{#deprecated}}
    #[deprecated]
    {{/deprecated}}
    {{{name}}}({{#isModel}}{{^avoidBoxedModels}}Box<{{/avoidBoxedModels}}{{/isModel}}{{{dataType}}}{{#isModel}}{{^avoidBoxedModels}}>{{/avoidBoxedModels}}{{/isModel}}),
{{/composedSchemas.oneOf}}
}

{{/oneOf.isEmpty}}
{{/discriminator}}
{{/isEnum}}
{{!-- for properties that are of enum type --}}
{{#vars}}
{{#isEnum}}
{{#description}}
/// {{{.}}}
{{/description}}
#[derive(Default, Copy, Clone, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
{{#isDeprecated}}
#[deprecated]
{{/isDeprecated}}
pub enum {{{enumName}}} {
    #[default]
{{#allowableValues}}
{{#enumVars}}
    {{#deprecated}}
    #[deprecated]
    {{/deprecated}}
    #[serde(rename = "{{{value}}}")]
    {{{name}}},
{{/enumVars}}
{{/allowableValues}}
}

{{/isEnum}}
{{/vars}}
{{/model}}
{{/models}}
