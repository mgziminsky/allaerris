{{>partial_header}}

#[allow(unused_imports)]
use crate::{
    models::{self, *},
    ErrorResponse, Result,
};

{{#operations.operation}}
{{#vendorExtensions.x-group-parameters}}
{{#hasParams}}
/// struct for passing parameters to the method [`{{classname}}::{{operationId}}`]
#[derive(Clone, Debug)]
{{#useBonBuilder}}
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
{{/useBonBuilder}}
pub struct {{{operationIdCamelCase}}}Params<{{#allParams}}{{^isPrimitiveType}}{{^isEnumRef}}'l{{-index}},{{/isEnumRef}}{{/isPrimitiveType}}{{#isString}}'l{{-index}},{{/isString}}{{/allParams}}> {
    {{#allParams}}
    {{#description}}
    /// {{{.}}}
    {{/description}}
    {{#deprecated}}
    #[deprecated]
    {{/deprecated}}
    pub {{{paramName}}}: {{>_api_field}},
    {{/allParams}}
}
{{/hasParams}}

{{/vendorExtensions.x-group-parameters}}
{{/operations.operation}}

{{#supportMultipleResponses}}
{{#operations.operation}}
/// struct for typed successes of method [`{{classname}}::{{operationId}}`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum {{{operationIdCamelCase}}}Success {
    {{#responses}}
    {{^is4xx}}
    {{^is5xx}}
    {{^isDefault}}
    Status{{code}}{{#content}}({{#isEnum}}{{{enumName}}}{{/isEnum}}{{^isEnum}}{{{dataType}}}{{/isEnum}}){{/content}},
    {{/isDefault}}
    {{/is5xx}}
    {{/is4xx}}
    {{/responses}}
    Unknown(serde_json::Value),
}

{{/operations.operation}}
{{/supportMultipleResponses}}
{{#operations.operation}}
/// struct for typed errors of method [`{{classname}}::{{operationId}}`]
#[derive(Debug, Clone, Serialize, Deserialize, thiserror::Error)]
#[serde(untagged)]
pub enum {{{operationIdCamelCase}}}Error {
    {{#responses}}
    {{^is1xx}}
    {{^is2xx}}
    {{^is3xx}}
    {{^isDefault}}
    #[error("{{{message}}}")]
    Status{{code}}{{#content}}({{#isEnum}}{{{enumName}}}{{/isEnum}}{{^isEnum}}{{{dataType}}}{{/isEnum}}){{/content}},
    {{/isDefault}}
    {{/is3xx}}
    {{/is2xx}}
    {{/is1xx}}
    {{/responses}}
    #[error("Unrecognized Error")]
    Unknown(serde_json::Value),
}
{{/operations.operation}}

pub struct {{classname}}<'c>(pub(crate) &'c crate::ApiClient);
impl {{classname}}<'_> {
    {{#operations.operation}}
    {{#description}}
    /// {{{.}}}
    {{/description}}
    {{#notes}}
    /// {{{.}}}
    {{/notes}}
    {{#isDeprecated}}
    #[deprecated]
    {{/isDeprecated}}
    {{#vendorExtensions.x-group-parameters}}
    pub {{#supportAsync}}async {{/supportAsync}}fn {{{operationId}}}(&self{{#hasParams}}, params: &{{{operationIdCamelCase}}}Params<{{#allParams}}{{^isPrimitiveType}}{{^isEnumRef}}'_,{{/isEnumRef}}{{/isPrimitiveType}}{{#isString}}'_,{{/isString}}{{/allParams}}>{{/hasParams}}) -> Result<{{#supportMultipleResponses}}ErrorResponse<{{{operationIdCamelCase}}}Success>{{/supportMultipleResponses}}{{^supportMultipleResponses}}{{^returnType}}(){{/returnType}}{{{returnType}}}{{/supportMultipleResponses}}> {
    {{/vendorExtensions.x-group-parameters}}
    {{^vendorExtensions.x-group-parameters}}
    pub {{#supportAsync}}async {{/supportAsync}}fn {{{operationId}}}(&self{{#allParams}}, {{{paramName}}}: {{>_api_param}}{{/allParams}}) -> Result<{{#supportMultipleResponses}}ErrorResponse<{{{operationIdCamelCase}}}Success>{{/supportMultipleResponses}}{{^supportMultipleResponses}}{{^returnType}}(){{/returnType}}{{{returnType}}}{{/supportMultipleResponses}}> {
        {{#allParams}}
        {{#first}}
        // add a prefix to parameters to efficiently prevent name collisions
        {{/first}}
        let {{{vendorExtensions.x-rust-param-identifier}}} = {{{paramName}}};
        {{/allParams}}
    {{/vendorExtensions.x-group-parameters}}
        #[allow(unused_mut)]
        let mut req_builder = self.0.request(
            reqwest::Method::{{{httpMethod}}},
            {{#hasPathParams}}
            format_args!(
            {{/hasPathParams}}
            "{{{path}}}"
            {{#pathParams}}
            , {{{baseName}}}={{#isString}}crate::urlencode({{/isString}}{{{vendorExtensions.x-rust-param-identifier}}}{{^required}}.unwrap(){{/required}}{{#required}}{{#isNullable}}.unwrap(){{/isNullable}}{{/required}}{{#isArray}}.join(",").as_ref(){{/isArray}}{{^isString}}{{^isUuid}}{{^isPrimitiveType}}{{^isContainer}}{{/isContainer}}{{/isPrimitiveType}}{{/isUuid}}{{/isString}}{{#isString}}){{/isString}}
            {{/pathParams}}
            {{#hasPathParams}}
            )
            {{/hasPathParams}}
        );
        {{#hasAuthMethods}}

        // Auth
        #[allow(unused_mut)]
        {
            let auth = &self.0.auth;
            let mut cookies = Vec::<String>::new();
        {{#authMethods}}
        {{#isApiKey}}
            if let Some(val) = &auth.{{#lambda.snakecase}}{{{name}}}{{/lambda.snakecase}} {
            {{#isKeyInHeader}}
                let mut val = reqwest::header::HeaderValue::from_str(val)?;
                val.set_sensitive(true);
                req_builder = req_builder.header("{{{keyParamName}}}", val);
            {{/isKeyInHeader}}
            {{^isKeyInHeader}}
                let name = crate::urlencode("{{{keyParamName}}}");
                let val = crate::urlencode(val);
            {{#isKeyInCookie}}
                cookies.push(format!("{name}={val}"));
            {{/isKeyInCookie}}
            {{#isKeyInQuery}}
                req_builder = req_builder.query(&[name, val]);
            {{/isKeyInQuery}}
            {{/isKeyInHeader}}
            }
        {{/isApiKey}}
        {{#isBasicBasic}}
            if let Some(BasicAuth{username, password}) = &auth.{{#lambda.snakecase}}{{{name}}}{{/lambda.snakecase}} {
                req_builder = req_builder.basic_auth(username, password.as_deref());
            }
        {{/isBasicBasic}}
        {{#isBasicBearer}}
            if let Some(token) = &auth.{{#lambda.snakecase}}{{{name}}}{{/lambda.snakecase}} {
                req_builder = req_builder.bearer_auth(token);
            }
        {{/isBasicBearer}}
        {{/authMethods}}
            if !cookies.is_empty() {
                req_builder = req_builder.header(
                    reqwest::header::COOKIE,
                    reqwest::header::HeaderValue::from_str(&cookies.join("; "))?
                );
            }
        }

        {{/hasAuthMethods}}
        {{#queryParams}}
        {{#required}}
        {{#isArray}}
        req_builder = match "{{collectionFormat}}" {
            "multi" => req_builder.query(&{{{vendorExtensions.x-rust-param-identifier}}}.iter().map(|p| ("{{{baseName}}}", p)).collect::<Vec<_>>()),
            _ => req_builder.query(&[("{{{baseName}}}", &{{{vendorExtensions.x-rust-param-identifier}}}.iter().map(|p| p.to_string()).collect::<Vec<_>>().join(","))]),
        };
        {{/isArray}}
        {{^isArray}}
        {{^isNullable}}
        req_builder = req_builder.query(&[("{{{baseName}}}", &{{{vendorExtensions.x-rust-param-identifier}}})]);
        {{/isNullable}}
        {{#isNullable}}
        {{#isDeepObject}}
        if let Some(ref param_value) = {{{vendorExtensions.x-rust-param-identifier}}} {
            {{^isExplode}}
            let params = crate::apis::parse_deep_object("{{{baseName}}}", &serde_json::to_value(param_value)?);
            req_builder = req_builder.query(&params);
            {{/isExplode}}
            {{#isExplode}}
            {{#isModel}}
            req_builder = req_builder.query(&param_value);
            {{/isModel}}
            {{#isMap}}
            let mut query_params = Vec::with_capacity(param_value.len());
            for (key, value) in param_value.iter() {
                query_params.push((key, serde_json::to_string(value)?));
            }
            req_builder = req_builder.query(&query_params);
            {{/isMap}}
            {{/isExplode}}
        };
        {{/isDeepObject}}
        {{^isDeepObject}}
        {{#isObject}}
        if let Some(ref param_value) = {{{vendorExtensions.x-rust-param-identifier}}} {
            req_builder = req_builder.query(&[("{{{baseName}}}", &serde_json::to_string(param_value)?)]);
        };
        {{/isObject}}
        {{#isModel}}
        if let Some(ref param_value) = {{{vendorExtensions.x-rust-param-identifier}}} {
            req_builder = req_builder.query(&[("{{{baseName}}}", &serde_json::to_string(param_value)?)]);
        };
        {{/isModel}}
        {{/isDeepObject}}
        {{^isObject}}
        {{^isModel}}
        if let Some(ref param_value) = {{{vendorExtensions.x-rust-param-identifier}}} {
            req_builder = req_builder.query(&[("{{{baseName}}}", &param_value)]);
        };
        {{/isModel}}
        {{/isObject}}
        {{/isNullable}}
        {{/isArray}}
        {{/required}}
        {{^required}}
        if let Some({{^isModel}}{{^isMap}}{{^isArray}}ref {{/isArray}}{{/isMap}}{{/isModel}}param_value) = {{{vendorExtensions.x-rust-param-identifier}}} {
            {{#isArray}}
            req_builder = match "{{collectionFormat}}" {
                "multi" => req_builder.query(&param_value.iter().map(|p| ("{{{baseName}}}", p)).collect::<Vec<_>>()),
                _ => req_builder.query(&[("{{{baseName}}}", &param_value.iter().map(|p| p.to_string()).collect::<Vec<_>>().join(","))]),
            };
            {{/isArray}}
            {{^isArray}}
            {{#isDeepObject}}
            {{^isExplode}}
            let params = crate::apis::parse_deep_object("{{{baseName}}}", &serde_json::to_value(param_value)?);
            req_builder = req_builder.query(&params);
            {{/isExplode}}
            {{#isExplode}}
            {{#isModel}}
            req_builder = req_builder.query(&param_value);
            {{/isModel}}
            {{#isMap}}
            let mut query_params = Vec::with_capacity(param_value.len());
            for (key, value) in param_value.iter() {
                query_params.push((key, serde_json::to_string(value)?));
            }
            req_builder = req_builder.query(&query_params);
            {{/isMap}}
            {{/isExplode}}
            {{/isDeepObject}}
            {{^isDeepObject}}
            {{#isObject}}
            req_builder = req_builder.query(&[("{{{baseName}}}", &serde_json::to_string(param_value)?)]);
            {{/isObject}}
            {{#isModel}}
            req_builder = req_builder.query(&[("{{{baseName}}}", &serde_json::to_string(param_value)?)]);
            {{/isModel}}
            {{^isObject}}
            {{^isModel}}
            req_builder = req_builder.query(&[("{{{baseName}}}", &param_value)]);
            {{/isModel}}
            {{/isObject}}
            {{/isDeepObject}}
            {{/isArray}}
        }
        {{/required}}
        {{/queryParams}}
        {{#hasHeaderParams}}
        {{#headerParams}}
        {{#required}}
        {{^isNullable}}
        req_builder = req_builder.header("{{{baseName}}}", {{{vendorExtensions.x-rust-param-identifier}}}{{#isArray}}.join(","){{/isArray}});
        {{/isNullable}}
        {{#isNullable}}
        match {{{vendorExtensions.x-rust-param-identifier}}} {
            Some(param_value) => { req_builder = req_builder.header("{{{baseName}}}", param_value{{#isArray}}.join(","){{/isArray}}); },
            None => { req_builder = req_builder.header("{{{baseName}}}", ""); },
        }
        {{/isNullable}}
        {{/required}}
        {{^required}}
        if let Some(param_value) = {{{vendorExtensions.x-rust-param-identifier}}} {
            req_builder = req_builder.header("{{{baseName}}}", param_value{{#isArray}}.join(","){{/isArray}});
        }
        {{/required}}
        {{/headerParams}}
        {{/hasHeaderParams}}
        {{#isMultipart}}
        {{#hasFormParams}}
        let mut multipart_form = reqwest{{^supportAsync}}::blocking{{/supportAsync}}::multipart::Form::new();
        {{#formParams}}
        {{#isFile}}
        {{^supportAsync}}
        {{#required}}
        {{^isNullable}}
        multipart_form = multipart_form.file("{{{baseName}}}", {{{vendorExtensions.x-rust-param-identifier}}})?;
        {{/isNullable}}
        {{#isNullable}}
        match {{{vendorExtensions.x-rust-param-identifier}}} {
            Some(param_value) => { multipart_form = multipart_form.file("{{{baseName}}}", param_value)?; },
            None => { unimplemented!("Required nullable form file param not supported"); },
        }
        {{/isNullable}}
        {{/required}}
        {{^required}}
        if let Some(param_value) = {{{vendorExtensions.x-rust-param-identifier}}} {
            multipart_form = multipart_form.file("{{{baseName}}}", param_value)?;
        }
        {{/required}}
        {{/supportAsync}}
        {{#supportAsync}}
        if {{{vendorExtensions.x-rust-param-identifier}}}.is_some() {
            // FIXME
            return Err(crate::ErrorKind::Other("File uploads not yet supported".into()))?;
        }
        {{/supportAsync}}
        {{/isFile}}
        {{^isFile}}
        {{#required}}
        {{^isNullable}}
        multipart_form = multipart_form.text("{{{baseName}}}", serde_json::to_string({{{vendorExtensions.x-rust-param-identifier}}})?);
        {{/isNullable}}
        {{#isNullable}}
        match {{{vendorExtensions.x-rust-param-identifier}}} {
            Some(param_value) => { multipart_form = multipart_form.text("{{{baseName}}}", serde_json::to_string(param_value)?); },
            None => { multipart_form = multipart_form.text("{{{baseName}}}", ""); },
        }
        {{/isNullable}}
        {{/required}}
        {{^required}}
        if let Some(param_value) = {{{vendorExtensions.x-rust-param-identifier}}} {
            multipart_form = multipart_form.text("{{{baseName}}}", serde_json::to_string(param_value)?);
        }
        {{/required}}
        {{/isFile}}
        {{/formParams}}
        req_builder = req_builder.multipart(multipart_form);
        {{/hasFormParams}}
        {{/isMultipart}}
        {{^isMultipart}}
        {{#hasFormParams}}
        let mut multipart_form_params = std::collections::HashMap::new();
        {{#formParams}}
        {{#isFile}}
        {{#required}}
        {{^isNullable}}
        multipart_form_params.insert("{{{baseName}}}", unimplemented!("File form param not supported with x-www-form-urlencoded content"));
        {{/isNullable}}
        {{#isNullable}}
        match {{{vendorExtensions.x-rust-param-identifier}}} {
            Some(param_value) => { multipart_form_params.insert("{{{baseName}}}", unimplemented!("File form param not supported with x-www-form-urlencoded content")); },
            None => { unimplemented!("Required nullable file form param not supported with x-www-form-urlencoded content"); },
        }
        {{/isNullable}}
        {{/required}}
        {{^required}}
        if let Some(param_value) = {{{vendorExtensions.x-rust-param-identifier}}} {
            multipart_form_params.insert("{{{baseName}}}", unimplemented!("File form param not supported with x-www-form-urlencoded content"));
        }
        {{/required}}
        {{/isFile}}
        {{^isFile}}
        {{#required}}
        {{^isNullable}}
        multipart_form_params.insert("{{{baseName}}}", {{{vendorExtensions.x-rust-param-identifier}}}{{#isArray}}.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(","){{/isArray}}.to_string());
        {{/isNullable}}
        {{#isNullable}}
        match {{{vendorExtensions.x-rust-param-identifier}}} {
            Some(param_value) => { multipart_form_params.insert("{{{baseName}}}", param_value{{#isArray}}.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(","){{/isArray}}.to_string()); },
            None => { multipart_form_params.insert("{{{baseName}}}", ""); },
        }
        {{/isNullable}}
        {{/required}}
        {{^required}}
        if let Some(param_value) = {{{vendorExtensions.x-rust-param-identifier}}} {
            multipart_form_params.insert("{{{baseName}}}", param_value{{#isArray}}.into_iter().map(|p| p.to_string()).collect::<Vec<String>>().join(","){{/isArray}}.to_string());
        }
        {{/required}}
        {{/isFile}}
        {{/formParams}}
        req_builder = req_builder.form(&multipart_form_params);
        {{/hasFormParams}}
        {{/isMultipart}}
        {{#hasBodyParam}}
        {{#bodyParams}}
        req_builder = req_builder.json(&{{{vendorExtensions.x-rust-param-identifier}}});
        {{/bodyParams}}
        {{/hasBodyParam}}

        let resp = req_builder.send(){{#supportAsync}}.await{{/supportAsync}}?;

        let status = resp.status();
        let content = resp.text(){{#supportAsync}}.await{{/supportAsync}}?;

        if !status.is_client_error() && !status.is_server_error() {
            {{^supportMultipleResponses}}
            {{#isResponseFile}}
            Ok(resp)
            {{/isResponseFile}}
            {{^isResponseFile}}
            {{^returnType}}
            Ok(())
            {{/returnType}}
            {{#returnType}}
            serde_json::from_str(&content).map_err(Into::into)
            {{/returnType}}
            {{/isResponseFile}}
            {{/supportMultipleResponses}}
            {{#supportMultipleResponses}}
            {{#isResponseFile}}
            Ok(resp)
            {{/isResponseFile}}
            {{^isResponseFile}}
            let entity: Option<{{{operationIdCamelCase}}}Success> = serde_json::from_str(&content).ok();
            Ok(ResponseContent { status, content, entity })
            {{/isResponseFile}}
            {{/supportMultipleResponses}}
        } else {
            #[allow(clippy::match_single_binding)]
            let error = match status.as_u16() {
                {{#responses}}
                {{^is1xx}}
                {{^is2xx}}
                {{^is3xx}}
                {{^isDefault}}
                {{code}} => {{{operationIdCamelCase}}}Error::Status{{code}}{{#content}}(serde_json::from_str(&content)?){{/content}},
                {{/isDefault}}
                {{/is3xx}}
                {{/is2xx}}
                {{/is1xx}}
                {{/responses}}
                _ => {{{operationIdCamelCase}}}Error::Unknown(serde_json::from_str(&content)?),
            };
            Err(ErrorResponse { status, content, source: Some(error.into()) }.into())
        }
    }
    {{/operations.operation}}
}
