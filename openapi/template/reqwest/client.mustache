{{>partial_header}}
use crate::apis;

use reqwest{{^supportAsync}}::blocking{{/supportAsync}}::Client;
{{#withAWSV4Signature}}
use aws_sigv4;
{{/withAWSV4Signature}}
{{#hasAuthMethods}}

#[allow(dead_code)]
#[derive(Debug, Clone, Default)]
pub struct AuthData {
{{#authMethods}}
    {{!-- TODO: OAuth, OpenId --}}
    {{#description}}
    /// {{{.}}}
    {{/description}}
    pub {{#lambda.snakecase}}{{{name}}}{{/lambda.snakecase}}: Option<{{#isBasicBasic}}BasicAuth{{/isBasicBasic}}{{#isBasicBearer}}String{{/isBasicBearer}}{{#isApiKey}}String{{/isApiKey}}>,
{{/authMethods}}
}

#[allow(dead_code)]
#[derive(Debug, Clone)]
pub struct BasicAuth {
    username: String,
    password: Option<String>,
}
{{/hasAuthMethods}}

#[derive(Debug, Clone)]
pub struct ApiClient {
    client: {{#supportMiddleware}}reqwest_middleware::ClientWithMiddleware{{/supportMiddleware}}{{^supportMiddleware}}Client{{/supportMiddleware}},
    server: reqwest::Url,
    {{#hasAuthMethods}}
    pub(crate) auth: AuthData,
    {{/hasAuthMethods}}
}

impl ApiClient {
    /// # PANICS (Debug)
    /// If `user_agent` is blank
    pub const fn builder(user_agent: &str) -> Builder {
        Builder::new(user_agent)
    }

    /// `path` should always start with single `/` and will be appended to the base server url
    pub fn request(&self, method: reqwest::Method, path: impl ::std::fmt::Display) -> reqwest::RequestBuilder {
        let base = self.server.as_str().strip_suffix('/').unwrap_or(self.server.as_str());
        self.client.request(method, format!("{base}{path}"))
    }
{{#apiInfo}}

{{#apis}}
    pub fn {{#lambda.snakecase}}{{{classVarName}}}{{/lambda.snakecase}}(&self) -> apis::{{{classname}}} {
        apis::{{{classname}}}(self)
    }

{{/apis}}
{{/apiInfo}}
}


pub struct Builder<'a> {
    user_agent: &'a str,
    server: Option<reqwest::Url>,
    {{#hasAuthMethods}}
    auth: Option<AuthData>,
    {{/hasAuthMethods}}
}

static DEFAULT_SERVER: std::sync::LazyLock<reqwest::Url> =
    std::sync::LazyLock::new(|| reqwest::Url::parse("{{{basePath}}}").unwrap());
impl<'a> Builder<'a> {
    const fn new(user_agent: &'a str) -> Self {
        let user_agent = user_agent.trim_ascii();
        debug_assert!(!user_agent.is_empty(), "`user_agent` must NOT be blank");
        Self {
            user_agent,
            server: None,
            auth: None,
        }
    }

    pub fn build(self) -> crate::Result<ApiClient> {
        if self.user_agent.is_empty() {
            return Err(crate::ErrorKind::Other("Blank user agent".into()))?;
        }
        let client = Client::builder()
            .user_agent(format!(
                concat!("{} ", env!("CARGO_PKG_NAME"), "/", env!("CARGO_PKG_VERSION")),
                self.user_agent
            ))
            .build()?;
        Ok(ApiClient {
            client{{#supportMiddleware}}: reqwest_middleware::ClientBuilder::new(client).build(){{/supportMiddleware}},
            server: self.server.unwrap_or_else(|| DEFAULT_SERVER.clone()),
            auth: self.auth.unwrap_or_default(),
        })
    }

    pub fn server(mut self, server: impl Into<reqwest::Url>) -> Self {
        self.server = Some(server.into());
        self
    }
    {{#hasAuthMethods}}

    pub fn auth(mut self, auth: AuthData) -> Self {
        self.auth = Some(auth);
        self
    }
    {{/hasAuthMethods}}
}
