/*
 * CurseForge API
 *
 * HTTP API for CurseForge
 *
 * The version of the OpenAPI document: 1.0.240719
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::apis;

use reqwest::Client;

#[allow(dead_code)]
#[derive(Debug, Clone, Default)]
pub struct AuthData {
    pub api_key_auth: Option<String>,
}

#[allow(dead_code)]
#[derive(Debug, Clone)]
pub struct BasicAuth {
    username: String,
    password: Option<String>,
}

#[derive(Debug, Clone)]
pub struct ApiClient {
    client: Client,
    server: reqwest::Url,
    pub(crate) auth: AuthData,
}

impl ApiClient {
    /// # PANICS (Debug)
    /// If `user_agent` is blank
    pub const fn builder(user_agent: &str) -> Builder {
        Builder::new(user_agent)
    }

    /// `path` should always start with single `/` and will be appended to the base server url
    pub fn request(&self, method: reqwest::Method, path: impl ::std::fmt::Display) -> reqwest::RequestBuilder {
        let base = self.server.as_str().strip_suffix('/').unwrap_or(self.server.as_str());
        self.client.request(method, format!("{base}{path}"))
    }

    pub fn categories(&self) -> apis::CategoriesApi {
        apis::CategoriesApi(self)
    }

    pub fn files(&self) -> apis::FilesApi {
        apis::FilesApi(self)
    }

    pub fn fingerprints(&self) -> apis::FingerprintsApi {
        apis::FingerprintsApi(self)
    }

    pub fn games(&self) -> apis::GamesApi {
        apis::GamesApi(self)
    }

    pub fn minecraft(&self) -> apis::MinecraftApi {
        apis::MinecraftApi(self)
    }

    pub fn mods(&self) -> apis::ModsApi {
        apis::ModsApi(self)
    }

}


pub struct Builder<'a> {
    user_agent: &'a str,
    server: Option<reqwest::Url>,
    auth: Option<AuthData>,
}

static DEFAULT_SERVER: std::sync::LazyLock<reqwest::Url> =
    std::sync::LazyLock::new(|| reqwest::Url::parse("https://api.curseforge.com").unwrap());
impl<'a> Builder<'a> {
    const fn new(user_agent: &'a str) -> Self {
        let user_agent = user_agent.trim_ascii();
        debug_assert!(!user_agent.is_empty(), "`user_agent` must NOT be blank");
        Self {
            user_agent,
            server: None,
            auth: None,
        }
    }

    pub fn build(self) -> crate::Result<ApiClient> {
        if self.user_agent.is_empty() {
            return Err(crate::ErrorKind::Other("Blank user agent".into()))?;
        }
        let client = Client::builder()
            .user_agent(format!(
                concat!("{} ", env!("CARGO_PKG_NAME"), "/", env!("CARGO_PKG_VERSION")),
                self.user_agent
            ))
            .build()?;
        Ok(ApiClient {
            client,
            server: self.server.unwrap_or_else(|| DEFAULT_SERVER.clone()),
            auth: self.auth.unwrap_or_default(),
        })
    }

    pub fn server(mut self, server: impl Into<reqwest::Url>) -> Self {
        self.server = Some(server.into());
        self
    }

    pub fn auth(mut self, auth: AuthData) -> Self {
        self.auth = Some(auth);
        self
    }
}
