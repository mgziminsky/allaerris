/*
 * CurseForge API
 *
 * HTTP API for CurseForge
 *
 * The version of the OpenAPI document: 1.0.240719
 * 
 * Generated by: https://openapi-generator.tech
 */


use crate::{
    models::{self, *},
    ErrorResponse, Result,
};

/// struct for passing parameters to the method [`MinecraftApi::get_minecraft_mod_loaders`]
#[derive(Clone, Debug)]
pub struct GetMinecraftModLoadersParams<'l1,> {
    pub version: Option<&'l1 str>,
    pub include_all: Option<bool>,
}

/// struct for passing parameters to the method [`MinecraftApi::get_minecraft_versions`]
#[derive(Clone, Debug)]
pub struct GetMinecraftVersionsParams<> {
    pub sort_descending: Option<bool>,
}

/// struct for passing parameters to the method [`MinecraftApi::get_specific_minecraft_mod_loader`]
#[derive(Clone, Debug)]
pub struct GetSpecificMinecraftModLoaderParams<'l1,> {
    pub mod_loader_name: &'l1 str,
}

/// struct for passing parameters to the method [`MinecraftApi::get_specific_minecraft_version`]
#[derive(Clone, Debug)]
pub struct GetSpecificMinecraftVersionParams<'l1,> {
    pub game_version_string: &'l1 str,
}


/// struct for typed errors of method [`MinecraftApi::get_minecraft_mod_loaders`]
#[derive(Debug, Clone, Serialize, Deserialize, thiserror::Error)]
#[serde(untagged)]
pub enum GetMinecraftModLoadersError {
    #[error("Not Found")]
    Status404(),
    #[error("Internal Server Error")]
    Status500(),
    #[error("Unrecognized Error")]
    UnknownValue(serde_json::Value),
}
/// struct for typed errors of method [`MinecraftApi::get_minecraft_versions`]
#[derive(Debug, Clone, Serialize, Deserialize, thiserror::Error)]
#[serde(untagged)]
pub enum GetMinecraftVersionsError {
    #[error("Not Found")]
    Status404(),
    #[error("Internal Server Error")]
    Status500(),
    #[error("Unrecognized Error")]
    UnknownValue(serde_json::Value),
}
/// struct for typed errors of method [`MinecraftApi::get_specific_minecraft_mod_loader`]
#[derive(Debug, Clone, Serialize, Deserialize, thiserror::Error)]
#[serde(untagged)]
pub enum GetSpecificMinecraftModLoaderError {
    #[error("Not Found")]
    Status404(),
    #[error("Internal Server Error")]
    Status500(),
    #[error("Unrecognized Error")]
    UnknownValue(serde_json::Value),
}
/// struct for typed errors of method [`MinecraftApi::get_specific_minecraft_version`]
#[derive(Debug, Clone, Serialize, Deserialize, thiserror::Error)]
#[serde(untagged)]
pub enum GetSpecificMinecraftVersionError {
    #[error("Not Found")]
    Status404(),
    #[error("Internal Server Error")]
    Status500(),
    #[error("Unrecognized Error")]
    UnknownValue(serde_json::Value),
}

pub struct MinecraftApi<'c>(pub(crate) &'c crate::ApiClient);
impl<'c> MinecraftApi<'c> {
    /// Get Minecraft ModLoaders
    pub async fn get_minecraft_mod_loaders(&self, params: &GetMinecraftModLoadersParams<'_,>) -> Result<models::ApiResponseOfListOfMinecraftModLoaderIndex> {
        // unwrap the parameters
        let GetMinecraftModLoadersParams { version, include_all, } = params;

        #[allow(unused_mut)]
        let mut local_var_req_builder = self.0.request(
            reqwest::Method::GET,
            "/v1/minecraft/modloader"
        );

        // Auth
        #[allow(unused_mut)]
        {
            let auth = &self.0.auth;
            let mut cookies = Vec::<String>::new();
            if let Some(val) = &auth.api_key_auth {
                let mut val = reqwest::header::HeaderValue::from_str(val)?;
                val.set_sensitive(true);
                local_var_req_builder = local_var_req_builder.header("x-api-key", val);
            }
            if !cookies.is_empty() {
                local_var_req_builder = local_var_req_builder.header(reqwest::header::COOKIE, reqwest::header::HeaderValue::from_str(&cookies.join("; "))?);
            }
        }

        if let Some(ref version) = version {
            local_var_req_builder = local_var_req_builder.query(&[("version", version)]);
        }

        if let Some(ref include_all) = include_all {
            local_var_req_builder = local_var_req_builder.query(&[("includeAll", include_all)]);
        }

        let local_var_resp = local_var_req_builder.send().await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Into::into)
        } else {
            let local_var_entity = serde_json::from_str::<GetMinecraftModLoadersError>(&local_var_content).map(|e| Box::new(e) as _).ok();
            let local_var_error = ErrorResponse { status: local_var_status, content: local_var_content, source: local_var_entity };
            Err(local_var_error.into())
        }
    }

    /// Get Minecraft Versions
    pub async fn get_minecraft_versions(&self, params: &GetMinecraftVersionsParams<>) -> Result<models::ApiResponseOfListOfMinecraftGameVersion> {
        // unwrap the parameters
        let GetMinecraftVersionsParams { sort_descending, } = params;

        #[allow(unused_mut)]
        let mut local_var_req_builder = self.0.request(
            reqwest::Method::GET,
            "/v1/minecraft/version"
        );

        // Auth
        #[allow(unused_mut)]
        {
            let auth = &self.0.auth;
            let mut cookies = Vec::<String>::new();
            if let Some(val) = &auth.api_key_auth {
                let mut val = reqwest::header::HeaderValue::from_str(val)?;
                val.set_sensitive(true);
                local_var_req_builder = local_var_req_builder.header("x-api-key", val);
            }
            if !cookies.is_empty() {
                local_var_req_builder = local_var_req_builder.header(reqwest::header::COOKIE, reqwest::header::HeaderValue::from_str(&cookies.join("; "))?);
            }
        }

        if let Some(ref sort_descending) = sort_descending {
            local_var_req_builder = local_var_req_builder.query(&[("sortDescending", sort_descending)]);
        }

        let local_var_resp = local_var_req_builder.send().await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Into::into)
        } else {
            let local_var_entity = serde_json::from_str::<GetMinecraftVersionsError>(&local_var_content).map(|e| Box::new(e) as _).ok();
            let local_var_error = ErrorResponse { status: local_var_status, content: local_var_content, source: local_var_entity };
            Err(local_var_error.into())
        }
    }

    /// Get Specific Minecraft ModLoader
    pub async fn get_specific_minecraft_mod_loader(&self, params: &GetSpecificMinecraftModLoaderParams<'_,>) -> Result<models::ApiResponseOfMinecraftModLoaderVersion> {
        // unwrap the parameters
        let GetSpecificMinecraftModLoaderParams { mod_loader_name, } = params;

        #[allow(unused_mut)]
        let mut local_var_req_builder = self.0.request(
            reqwest::Method::GET,
            format_args!(
            "/v1/minecraft/modloader/{modLoaderName}"
            , modLoaderName=crate::urlencode(mod_loader_name)
            )
        );

        // Auth
        #[allow(unused_mut)]
        {
            let auth = &self.0.auth;
            let mut cookies = Vec::<String>::new();
            if let Some(val) = &auth.api_key_auth {
                let mut val = reqwest::header::HeaderValue::from_str(val)?;
                val.set_sensitive(true);
                local_var_req_builder = local_var_req_builder.header("x-api-key", val);
            }
            if !cookies.is_empty() {
                local_var_req_builder = local_var_req_builder.header(reqwest::header::COOKIE, reqwest::header::HeaderValue::from_str(&cookies.join("; "))?);
            }
        }

        let local_var_resp = local_var_req_builder.send().await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Into::into)
        } else {
            let local_var_entity = serde_json::from_str::<GetSpecificMinecraftModLoaderError>(&local_var_content).map(|e| Box::new(e) as _).ok();
            let local_var_error = ErrorResponse { status: local_var_status, content: local_var_content, source: local_var_entity };
            Err(local_var_error.into())
        }
    }

    /// Get Specific Minecraft Version
    pub async fn get_specific_minecraft_version(&self, params: &GetSpecificMinecraftVersionParams<'_,>) -> Result<models::ApiResponseOfMinecraftGameVersion> {
        // unwrap the parameters
        let GetSpecificMinecraftVersionParams { game_version_string, } = params;

        #[allow(unused_mut)]
        let mut local_var_req_builder = self.0.request(
            reqwest::Method::GET,
            format_args!(
            "/v1/minecraft/version/{gameVersionString}"
            , gameVersionString=crate::urlencode(game_version_string)
            )
        );

        // Auth
        #[allow(unused_mut)]
        {
            let auth = &self.0.auth;
            let mut cookies = Vec::<String>::new();
            if let Some(val) = &auth.api_key_auth {
                let mut val = reqwest::header::HeaderValue::from_str(val)?;
                val.set_sensitive(true);
                local_var_req_builder = local_var_req_builder.header("x-api-key", val);
            }
            if !cookies.is_empty() {
                local_var_req_builder = local_var_req_builder.header(reqwest::header::COOKIE, reqwest::header::HeaderValue::from_str(&cookies.join("; "))?);
            }
        }

        let local_var_resp = local_var_req_builder.send().await?;

        let local_var_status = local_var_resp.status();
        let local_var_content = local_var_resp.text().await?;

        if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
            serde_json::from_str(&local_var_content).map_err(Into::into)
        } else {
            let local_var_entity = serde_json::from_str::<GetSpecificMinecraftVersionError>(&local_var_content).map(|e| Box::new(e) as _).ok();
            let local_var_error = ErrorResponse { status: local_var_status, content: local_var_content, source: local_var_entity };
            Err(local_var_error.into())
        }
    }

}
