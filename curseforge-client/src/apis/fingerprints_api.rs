/*
 * CurseForge API
 *
 * HTTP API for CurseForge
 *
 * The version of the OpenAPI document: 1.0.240719
 * 
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use crate::{
    models::{self, *},
    ErrorResponse, Result,
};

/// struct for passing parameters to the method [`FingerprintsApi::get_fingerprint_fuzzy_matches`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct GetFingerprintFuzzyMatchesParams<'l1,> {
    pub get_fuzzy_matches_request_body: &'l1 GetFuzzyMatchesRequestBody,
}

/// struct for passing parameters to the method [`FingerprintsApi::get_fingerprint_fuzzy_matches_by_game`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct GetFingerprintFuzzyMatchesByGameParams<'l2,> {
    /// The game id the find matches in
    pub game_id: u64,
    pub get_fuzzy_matches_request_body: &'l2 GetFuzzyMatchesRequestBody,
}

/// struct for passing parameters to the method [`FingerprintsApi::get_fingerprint_matches`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct GetFingerprintMatchesParams<'l1,> {
    pub get_fingerprint_matches_request_body: &'l1 GetFingerprintMatchesRequestBody,
}

/// struct for passing parameters to the method [`FingerprintsApi::get_fingerprint_matches_by_game`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct GetFingerprintMatchesByGameParams<'l2,> {
    /// The game id the find matches in
    pub game_id: u64,
    pub get_fingerprint_matches_request_body: &'l2 GetFingerprintMatchesRequestBody,
}


/// struct for typed errors of method [`FingerprintsApi::get_fingerprint_fuzzy_matches`]
#[derive(Debug, Clone, Serialize, Deserialize, thiserror::Error)]
#[serde(untagged)]
pub enum GetFingerprintFuzzyMatchesError {
    #[error("Bad Request")]
    Status400,
    #[error("Service Unavailable")]
    Status503,
    #[error("Unrecognized Error")]
    Unknown(serde_json::Value),
}
/// struct for typed errors of method [`FingerprintsApi::get_fingerprint_fuzzy_matches_by_game`]
#[derive(Debug, Clone, Serialize, Deserialize, thiserror::Error)]
#[serde(untagged)]
pub enum GetFingerprintFuzzyMatchesByGameError {
    #[error("Bad Request")]
    Status400,
    #[error("Service Unavailable")]
    Status503,
    #[error("Unrecognized Error")]
    Unknown(serde_json::Value),
}
/// struct for typed errors of method [`FingerprintsApi::get_fingerprint_matches`]
#[derive(Debug, Clone, Serialize, Deserialize, thiserror::Error)]
#[serde(untagged)]
pub enum GetFingerprintMatchesError {
    #[error("Bad Request")]
    Status400,
    #[error("Service Unavailable")]
    Status503,
    #[error("Unrecognized Error")]
    Unknown(serde_json::Value),
}
/// struct for typed errors of method [`FingerprintsApi::get_fingerprint_matches_by_game`]
#[derive(Debug, Clone, Serialize, Deserialize, thiserror::Error)]
#[serde(untagged)]
pub enum GetFingerprintMatchesByGameError {
    #[error("Bad Request")]
    Status400,
    #[error("Service Unavailable")]
    Status503,
    #[error("Unrecognized Error")]
    Unknown(serde_json::Value),
}

pub struct FingerprintsApi<'c>(pub(crate) &'c crate::ApiClient);
impl FingerprintsApi<'_> {
    /// Get mod files that match a list of fingerprints using fuzzy matching.
    pub async fn get_fingerprint_fuzzy_matches(&self, params: &GetFingerprintFuzzyMatchesParams<'_,>) -> Result<models::GetFingerprintFuzzyMatchesResponse> {
        #[allow(unused_mut)]
        let mut req_builder = self.0.request(
            reqwest::Method::POST,
            "/v1/fingerprints/fuzzy"
        );

        // Auth
        #[allow(unused_mut)]
        {
            let auth = &self.0.auth;
            let mut cookies = Vec::<String>::new();
            if let Some(val) = &auth.api_key_auth {
                let mut val = reqwest::header::HeaderValue::from_str(val)?;
                val.set_sensitive(true);
                req_builder = req_builder.header("x-api-key", val);
            }
            if !cookies.is_empty() {
                req_builder = req_builder.header(
                    reqwest::header::COOKIE,
                    reqwest::header::HeaderValue::from_str(&cookies.join("; "))?
                );
            }
        }

        req_builder = req_builder.json(&params.get_fuzzy_matches_request_body);

        let resp = req_builder.send().await?;

        let status = resp.status();
        let content = resp.text().await?;

        if !status.is_client_error() && !status.is_server_error() {
            serde_json::from_str(&content).map_err(Into::into)
        } else {
            #[allow(clippy::match_single_binding)]
            let error = match status.as_u16() {
                400 => GetFingerprintFuzzyMatchesError::Status400,
                503 => GetFingerprintFuzzyMatchesError::Status503,
                _ => GetFingerprintFuzzyMatchesError::Unknown(serde_json::from_str(&content)?),
            };
            Err(ErrorResponse { status, content, source: Some(error.into()) }.into())
        }
    }
    /// Get mod files that match a list of fingerprints using fuzzy matching.
    pub async fn get_fingerprint_fuzzy_matches_by_game(&self, params: &GetFingerprintFuzzyMatchesByGameParams<'_,>) -> Result<models::GetFingerprintFuzzyMatchesResponse> {
        #[allow(unused_mut)]
        let mut req_builder = self.0.request(
            reqwest::Method::POST,
            format_args!(
            "/v1/fingerprints/fuzzy/{gameId}"
            , gameId=params.game_id
            )
        );

        // Auth
        #[allow(unused_mut)]
        {
            let auth = &self.0.auth;
            let mut cookies = Vec::<String>::new();
            if let Some(val) = &auth.api_key_auth {
                let mut val = reqwest::header::HeaderValue::from_str(val)?;
                val.set_sensitive(true);
                req_builder = req_builder.header("x-api-key", val);
            }
            if !cookies.is_empty() {
                req_builder = req_builder.header(
                    reqwest::header::COOKIE,
                    reqwest::header::HeaderValue::from_str(&cookies.join("; "))?
                );
            }
        }

        req_builder = req_builder.json(&params.get_fuzzy_matches_request_body);

        let resp = req_builder.send().await?;

        let status = resp.status();
        let content = resp.text().await?;

        if !status.is_client_error() && !status.is_server_error() {
            serde_json::from_str(&content).map_err(Into::into)
        } else {
            #[allow(clippy::match_single_binding)]
            let error = match status.as_u16() {
                400 => GetFingerprintFuzzyMatchesByGameError::Status400,
                503 => GetFingerprintFuzzyMatchesByGameError::Status503,
                _ => GetFingerprintFuzzyMatchesByGameError::Unknown(serde_json::from_str(&content)?),
            };
            Err(ErrorResponse { status, content, source: Some(error.into()) }.into())
        }
    }
    /// Get mod files that match a list of fingerprints (murmur2 hashes with seed 1).
    pub async fn get_fingerprint_matches(&self, params: &GetFingerprintMatchesParams<'_,>) -> Result<models::GetFingerprintMatchesResponse> {
        #[allow(unused_mut)]
        let mut req_builder = self.0.request(
            reqwest::Method::POST,
            "/v1/fingerprints"
        );

        // Auth
        #[allow(unused_mut)]
        {
            let auth = &self.0.auth;
            let mut cookies = Vec::<String>::new();
            if let Some(val) = &auth.api_key_auth {
                let mut val = reqwest::header::HeaderValue::from_str(val)?;
                val.set_sensitive(true);
                req_builder = req_builder.header("x-api-key", val);
            }
            if !cookies.is_empty() {
                req_builder = req_builder.header(
                    reqwest::header::COOKIE,
                    reqwest::header::HeaderValue::from_str(&cookies.join("; "))?
                );
            }
        }

        req_builder = req_builder.json(&params.get_fingerprint_matches_request_body);

        let resp = req_builder.send().await?;

        let status = resp.status();
        let content = resp.text().await?;

        if !status.is_client_error() && !status.is_server_error() {
            serde_json::from_str(&content).map_err(Into::into)
        } else {
            #[allow(clippy::match_single_binding)]
            let error = match status.as_u16() {
                400 => GetFingerprintMatchesError::Status400,
                503 => GetFingerprintMatchesError::Status503,
                _ => GetFingerprintMatchesError::Unknown(serde_json::from_str(&content)?),
            };
            Err(ErrorResponse { status, content, source: Some(error.into()) }.into())
        }
    }
    /// Get mod files that match a list of fingerprints.
    pub async fn get_fingerprint_matches_by_game(&self, params: &GetFingerprintMatchesByGameParams<'_,>) -> Result<models::GetFingerprintMatchesResponse> {
        #[allow(unused_mut)]
        let mut req_builder = self.0.request(
            reqwest::Method::POST,
            format_args!(
            "/v1/fingerprints/{gameId}"
            , gameId=params.game_id
            )
        );

        // Auth
        #[allow(unused_mut)]
        {
            let auth = &self.0.auth;
            let mut cookies = Vec::<String>::new();
            if let Some(val) = &auth.api_key_auth {
                let mut val = reqwest::header::HeaderValue::from_str(val)?;
                val.set_sensitive(true);
                req_builder = req_builder.header("x-api-key", val);
            }
            if !cookies.is_empty() {
                req_builder = req_builder.header(
                    reqwest::header::COOKIE,
                    reqwest::header::HeaderValue::from_str(&cookies.join("; "))?
                );
            }
        }

        req_builder = req_builder.json(&params.get_fingerprint_matches_request_body);

        let resp = req_builder.send().await?;

        let status = resp.status();
        let content = resp.text().await?;

        if !status.is_client_error() && !status.is_server_error() {
            serde_json::from_str(&content).map_err(Into::into)
        } else {
            #[allow(clippy::match_single_binding)]
            let error = match status.as_u16() {
                400 => GetFingerprintMatchesByGameError::Status400,
                503 => GetFingerprintMatchesByGameError::Status503,
                _ => GetFingerprintMatchesByGameError::Unknown(serde_json::from_str(&content)?),
            };
            Err(ErrorResponse { status, content, source: Some(error.into()) }.into())
        }
    }
}
