/*
 * CurseForge API
 *
 * HTTP API for CurseForge
 *
 * The version of the OpenAPI document: 1.0.250410
 * 
 * Generated by: https://openapi-generator.tech
 */


#[allow(unused_imports)]
use crate::{
    models::{self, *},
    ErrorResponse, Result,
};

/// struct for passing parameters to the method [`CategoriesApi::get_categories`]
#[derive(Clone, Debug)]
#[cfg_attr(feature = "bon", derive(::bon::Builder))]
pub struct GetCategoriesParams<> {
    /// A game unique id
    pub game_id: u32,
    /// A class unique id
    pub class_id: Option<u32>,
    /// A flag used with gameId to return only classes
    pub classes_only: Option<bool>,
}


/// struct for typed errors of method [`CategoriesApi::get_categories`]
#[derive(Debug, Clone, Serialize, Deserialize, thiserror::Error)]
#[serde(untagged)]
pub enum GetCategoriesError {
    #[error("Not Found")]
    Status404,
    #[error("Internal Server Error")]
    Status500,
    #[error("Unrecognized Error")]
    Unknown(serde_json::Value),
}

pub struct CategoriesApi<'c>(pub(crate) &'c crate::ApiClient);
impl CategoriesApi<'_> {
    /// Get all available classes and categories of the specified game. Specify a game id for a list of all game categories, or a class id for a list of categories under that class.
    pub async fn get_categories(&self, params: &GetCategoriesParams<>) -> Result<models::GetCategoriesResponse> {
        #[allow(unused_mut)]
        let mut req_builder = self.0.request(
            reqwest::Method::GET,
            "/v1/categories"
        );

        // Auth
        #[allow(unused_mut)]
        {
            let auth = &self.0.auth;
            let mut cookies = Vec::<String>::new();
            if let Some(val) = &auth.api_key_auth {
                let mut val = reqwest::header::HeaderValue::from_str(val)?;
                val.set_sensitive(true);
                req_builder = req_builder.header("x-api-key", val);
            }
            if !cookies.is_empty() {
                req_builder = req_builder.header(
                    reqwest::header::COOKIE,
                    reqwest::header::HeaderValue::from_str(&cookies.join("; "))?
                );
            }
        }

        req_builder = req_builder.query(&[("gameId", &params.game_id)]);
        if let Some(ref param_value) = params.class_id {
            req_builder = req_builder.query(&[("classId", &param_value)]);
        }
        if let Some(ref param_value) = params.classes_only {
            req_builder = req_builder.query(&[("classesOnly", &param_value)]);
        }

        let resp = req_builder.send().await?;

        let status = resp.status();
        let content = resp.text().await?;

        if !status.is_client_error() && !status.is_server_error() {
            serde_json::from_str(&content).map_err(Into::into)
        } else {
            #[allow(clippy::match_single_binding)]
            let error = match status.as_u16() {
                404 => GetCategoriesError::Status404,
                500 => GetCategoriesError::Status500,
                _ => GetCategoriesError::Unknown(serde_json::from_str(&content)?),
            };
            Err(ErrorResponse { status, content, source: Some(error.into()) }.into())
        }
    }
}
